{"version":3,"file":"static/js/6006.604e29a0.chunk.js","mappings":"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","sources":["../node_modules/@coreui/utils/src/rgbToHex.ts","views/theme/colors/Colors.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (__COREUI_VERSION__): rgbToHex.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst rgbToHex = (color: string) => {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined')\n  }\n\n  if (color === 'transparent') {\n    return '#00000000'\n  }\n\n  const rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)\n\n  if (!rgb) {\n    throw new Error(`${color} is not a valid rgb color`)\n  }\n\n  const r = `0${parseInt(rgb[1], 10).toString(16)}`\n  const g = `0${parseInt(rgb[2], 10).toString(16)}`\n  const b = `0${parseInt(rgb[3], 10).toString(16)}`\n\n  return `#${r.slice(-2)}${g.slice(-2)}${b.slice(-2)}`\n}\n\nexport default rgbToHex\n","import PropTypes from 'prop-types'\nimport React, { useEffect, useState, createRef } from 'react'\nimport classNames from 'classnames'\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from '@coreui/react'\nimport { rgbToHex } from '@coreui/utils'\nimport { DocsLink } from 'src/components'\n\nconst ThemeView = () => {\n  const [color, setColor] = useState('rgb(255, 255, 255)')\n  const ref = createRef()\n\n  useEffect(() => {\n    const el = ref.current.parentNode.firstChild\n    const varColor = window.getComputedStyle(el).getPropertyValue('background-color')\n    setColor(varColor)\n  }, [ref])\n\n  return (\n    <table className=\"table w-100\" ref={ref}>\n      <tbody>\n        <tr>\n          <td className=\"text-medium-emphasis\">HEX:</td>\n          <td className=\"font-weight-bold\">{rgbToHex(color)}</td>\n        </tr>\n        <tr>\n          <td className=\"text-medium-emphasis\">RGB:</td>\n          <td className=\"font-weight-bold\">{color}</td>\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n\nconst ThemeColor = ({ className, children }) => {\n  const classes = classNames(className, 'theme-color w-75 rounded mb-3')\n  return (\n    <CCol xs={12} sm={6} md={4} xl={2} className=\"mb-4\">\n      <div className={classes} style={{ paddingTop: '75%' }}></div>\n      {children}\n      <ThemeView />\n    </CCol>\n  )\n}\n\nThemeColor.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nconst Colors = () => {\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          Theme colors\n          <DocsLink href=\"https://coreui.io/docs/utilities/colors/\" />\n        </CCardHeader>\n        <CCardBody>\n          <CRow>\n            <ThemeColor className=\"bg-primary\">\n              <h6>Brand Primary Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-secondary\">\n              <h6>Brand Secondary Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-success\">\n              <h6>Brand Success Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-danger\">\n              <h6>Brand Danger Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-warning\">\n              <h6>Brand Warning Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-info\">\n              <h6>Brand Info Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-light\">\n              <h6>Brand Light Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-dark\">\n              <h6>Brand Dark Color</h6>\n            </ThemeColor>\n          </CRow>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default Colors\n"],"names":["rgbToHex","color","TypeError","rgb","match","Error","concat","r","parseInt","toString","g","b","slice","ThemeView","setColor","useState","ref","createRef","useEffect","el","current","parentNode","firstChild","varColor","window","getComputedStyle","getPropertyValue","_jsx","className","children","_jsxs","ThemeColor","_ref","classes","classNames","CCol","xs","sm","md","xl","style","paddingTop","Colors","_Fragment","CCard","CCardHeader","DocsLink","href","CCardBody","CRow"],"sourceRoot":""}